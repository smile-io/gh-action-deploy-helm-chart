name: "Deploy Helm"
description: "Deploys a new helm chart version to Smile's infrastructure."
inputs:
  chart_version:
    description: "The new version of the helm chart that should be deployed."
    required: true
  short_environment:
    description: "Environment short-form as used in Smile's infrastructure-live repo. One of `dev`, `stage`, `prod`"
    required: true
  terraform_module_name:
    description: "Name of the Terraform module that manages this application's release."
    required: true
  helm_release_name:
    description: "Name of the helm release, used to better handle errors."
    required: true
  env_to_account_mapping_json:
    description: "Mapping of environments to account ids."
    default: '{"dev": "307739032832", "stage": "389299793054", "prod": "964498696771"}'

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Update infrastructure-live
      id: update_infra_live
      shell: bash
      run: |
        terraform-update-variable \
          --name "chart_version" \
          --value "\"${{ inputs.chart_version }}\"" \
          --vars-path "${{ inputs.short_environment }}/us-east-1/${{ inputs.short_environment }}/services/${{ inputs.terraform_module_name }}/terragrunt.hcl" \
          --git-url "https://github.com/smile-io/infrastructure-live.git" \
          --git-checkout-path "${{ runner.temp }}/infrastructure-live" \
          --git-user-email "infrastructure+github-ci@smile.io" \
          --git-user-name "smile-ci-service" \
          --github-token-secrets-manager-arn "arn:aws:secretsmanager:us-east-1:877068819435:secret:smile-ci-service-github-token-mKMOOR" \
          --ssh-key-secrets-manager-arn "arn:aws:secretsmanager:us-east-1:877068819435:secret:smile-ci-service-github-ssh-private-key-osnOEZ"
    - name: Handle Release Errors
      if: ${{ failure() && steps.update_infra_live.conclusion == 'failure' }}
      shell: bash
      run: echo "::error title=Error Updating Infra Live::Git error occured while pushing updates to smile-io/infrastructure-live. Please contact the SRE team for assistance."
    - name: Release changes
      id: release_changes
      shell: bash
      run: |
        terragrunt apply --terragrunt-working-dir "${{ runner.temp }}/infrastructure-live/${{ inputs.short_environment }}/us-east-1/${{ inputs.short_environment }}/services/${{ inputs.terraform_module_name }}"  --terragrunt-iam-role "arn:aws:iam::${{ fromJson(inputs.env_to_account_mapping_json)[inputs.short_environment] }}:role/allow-auto-deploy-from-other-accounts" -input=false -auto-approve
        # Force failure
        exit 1
    - name: Detect successful rollback
      if: ${{ failure() && steps.release_changes.conclusion == 'failure' }}
      id: detect_rollback_success
      shell: bash
      run: |
        export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
          $(aws sts assume-role \
          --role-arn arn:aws:iam::${{ fromJson(inputs.env_to_account_mapping_json)[inputs.short_environment] }}:role/allow-auto-deploy-from-other-accounts \
          --role-session-name GHActionReleaseStatusCheck \
          --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
          --output text))
        aws eks update-kubeconfig --name eks-${{ inputs.short_environment }} --region us-east-1
        echo "release_status=$(helm history ${{ inputs.helm_release_name }} --max 1 -n applications -o json | jq -r .[0].status)" >> $GITHUB_OUTPUT
    - name: Handle Successful Rollback
      if: ${{ failure() && steps.release_changes.conclusion == 'failure' && steps.detect_rollback_success.outputs.release_status == 'deployed' }}
      shell: bash
      run: |
        echo "::error title=Error With Release::Your release failed to apply to Smile's Kubernetes cluster successfully. This means one or more services were unable to start up properly, check your application logs in DataDog for errors or reach out to the SRE team for help debugging. If you can't find anything and think this may be a transient issue, you can try deploying again by retrying this Github Action."
        # Datadog API Event
        # Define the event details
        TITLE="Deployment Rollback"
        TEXT="A rollback occurred in ${{ inputs.short_environment }}."
        TAGS="environment:${{ inputs.short_environment }},action:rollback"
        ALERT_TYPE="warning"

        # Use curl to send the event to Datadog
        curl -X POST "https://api.datadoghq.com/api/v1/events" \
          -H "Content-type: application/json" \
          -H "DD-API-KEY: $DD_API_KEY" \
          -d '{
            "title": "'"$TITLE"'",
            "text": "'"$TEXT"'",
            "tags": ["'"$TAGS"'"],
            "alert_type": "'"$ALERT_TYPE"'"
          }'
    - name: Handle Failed Rollback
      if: ${{ failure() && steps.release_changes.conclusion == 'failure' && steps.detect_rollback_success.outputs.release_status != 'deployed' }}
      shell: bash
      run: |
          echo "::error title=Error With Release::An unexpected error occured and Helm was unable to roll back successfully. Your changes may be partially deployed, and a manual rollback to a known working version via 'smile-cli app rollback' is recommended."
